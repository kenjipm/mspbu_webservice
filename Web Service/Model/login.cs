//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web_Service.Model
{
    using System;
    using System.Collections.Generic;
    using System.Security.Cryptography;
    
    public partial class login
    {
        public int Id { get; set; }
        public string username { get; set; }
        public string password { get; set; }
        public string nama_id { get; set; }
        public string alamat { get; set; }
        public string pemilik { get; set; }
        public string role { get; set; }

        public const int HASH_BYTE_SIZE = 24;
        public const int PBKDF2_ITERATIONS = 1000;

        public const int ITERATION_INDEX = 0;
        public const int SALT_INDEX = 1;
        public const int PBKDF2_INDEX = 2;

        /// <summary>
        /// Creates a salted PBKDF2 hash of the password
        /// </summary>
        /// <param name="username">The username as salt</param>
        /// <param name="password">The password to hash</param>
        /// <returns>The hash of the password</returns>
        public static string createHash(string username, string hash)
        {
            // Username as a salt
            byte[] salt = new byte[username.Length * sizeof(char)];
            System.Buffer.BlockCopy(username.ToCharArray(), 0, salt, 0, salt.Length);
            return PBKDF2_ITERATIONS + ":" +
                Convert.ToBase64String(salt) + ":" +
                hash;
        }

        /// <summary>
        /// Validates a password given a hash of the correct one
        /// </summary>
        /// <param name="password">The password to check</param>
        /// <param name="correctHash">A hash of the correct password</param>
        /// <returns>True if the password is correct. False otherwise</returns>
        public static bool validatePassword(string password, string correctHash)
        {
            // Extract the parameters from the hash
            char[] delimiter = { ':' };
            string[] split = correctHash.Split(delimiter);
            int iterations = Int32.Parse(split[ITERATION_INDEX]);
            byte[] salt = Convert.FromBase64String(split[SALT_INDEX]);
            byte[] hash = Convert.FromBase64String(split[PBKDF2_INDEX]);

            byte[] testHash = Convert.FromBase64String(password);
            return slowEquals(hash, testHash);
        }

        /// <summary>
        /// Compares two bytes arrays in length-constant time. This comparison
        /// method is used so that password hashes cannot be extracted from
        /// on-line systems using a timing attack and then attacked off-line
        /// </summary>
        /// <param name="a">The first byte array</param>
        /// <param name="b">The second byte array</param>
        /// <returns>True if both byte arrays are equal. False otherewise</returns>
        private static bool slowEquals(byte[] a, byte[] b)
        {
            uint diff = (uint)a.Length ^ (uint)b.Length;
            for (int i = 0; i < a.Length && i < b.Length; i++)
            {
                diff |= (uint)(a[i] ^ b[i]);
            }
            return diff == 0;
        }

        /// <summary>
        /// Computes the PBKDF2-SHA1 hash of a password.
        /// </summary>
        /// <param name="password">The password to hash</param>
        /// <param name="salt">The salt</param>
        /// <param name="iterations">The PBKDF2 iterations count</param>
        /// <param name="outputBytes">The length of the hash to generate, in bytes</param>
        /// <returns>A hash of the password</returns>
        private static byte[] PBKDF2(string password, byte[] salt, int iterations, int outputBytes)
        {
            Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(password, salt);
            pbkdf2.IterationCount = iterations;
            return pbkdf2.GetBytes(outputBytes);
        }
    }
}
